// Generated by view binder compiler. Do not edit!
package com.shopapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.shopapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView firstItemName;

  @NonNull
  public final TextView orderDate;

  @NonNull
  public final TextView orderItems;

  @NonNull
  public final TextView orderNumber;

  @NonNull
  public final TextView orderStatus;

  @NonNull
  public final TextView orderTotal;

  private ItemOrderBinding(@NonNull CardView rootView, @NonNull TextView firstItemName,
      @NonNull TextView orderDate, @NonNull TextView orderItems, @NonNull TextView orderNumber,
      @NonNull TextView orderStatus, @NonNull TextView orderTotal) {
    this.rootView = rootView;
    this.firstItemName = firstItemName;
    this.orderDate = orderDate;
    this.orderItems = orderItems;
    this.orderNumber = orderNumber;
    this.orderStatus = orderStatus;
    this.orderTotal = orderTotal;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.firstItemName;
      TextView firstItemName = ViewBindings.findChildViewById(rootView, id);
      if (firstItemName == null) {
        break missingId;
      }

      id = R.id.orderDate;
      TextView orderDate = ViewBindings.findChildViewById(rootView, id);
      if (orderDate == null) {
        break missingId;
      }

      id = R.id.orderItems;
      TextView orderItems = ViewBindings.findChildViewById(rootView, id);
      if (orderItems == null) {
        break missingId;
      }

      id = R.id.orderNumber;
      TextView orderNumber = ViewBindings.findChildViewById(rootView, id);
      if (orderNumber == null) {
        break missingId;
      }

      id = R.id.orderStatus;
      TextView orderStatus = ViewBindings.findChildViewById(rootView, id);
      if (orderStatus == null) {
        break missingId;
      }

      id = R.id.orderTotal;
      TextView orderTotal = ViewBindings.findChildViewById(rootView, id);
      if (orderTotal == null) {
        break missingId;
      }

      return new ItemOrderBinding((CardView) rootView, firstItemName, orderDate, orderItems,
          orderNumber, orderStatus, orderTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
